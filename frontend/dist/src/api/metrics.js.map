{"version":3,"sources":["../../../src/api/metrics.js"],"names":["payload","method","url","data","promInterval","netIOThreshold","headers","promAccount","resp","code","result","map","item","value","getContainersWithHignNetIO","diskIOThreshold","getContainersWithHignDiskIO","console","log","cpuUsageThreshold","Number","toFixed","getContainersWithHighCPUUsage","memoryUsageThreshold","filter","metric","name","getContainersWithHighMemoryUsage"],"mappings":"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","file":"metrics.js","sourcesContent":["import axios from './base'\n// import {NetIOThreshold, DiskIOThreshold, CPUUsageThreshold, MemoryUsageThreshold, PromAccount, Interval} from '@/common/constants'\nimport {b64EncodeUnicode, byteTransferConver, byteConver} from '@/util'\n\nexport async function getContainersWithHignNetIO (payload = {}) {\n  const resp = await axios({\n    method: 'POST',\n    url: `/endpoint/local/prom/api/v1/query`,\n    data: {'query': `sum(rate(container_network_receive_bytes_total{id=~\"/docker/.*\"}[${payload.promInterval}]) + rate(container_network_transmit_bytes_total{id=~\"/docker/.*\"}[${payload.promInterval}])) by (name) >${payload.netIOThreshold}`\n    },\n    headers: {\n      'Authorization': `Basic ${b64EncodeUnicode(payload.promAccount)}`\n    }\n  })\n\n  if (resp.data.code === 200) {\n    return resp.data.data.result.map((item) => {\n      if (item.value[1]) {\n        item.value[1] = byteTransferConver(item.value[1], 2)\n      }\n      return item\n    })\n  }\n}\n\nexport async function getContainersWithHignDiskIO (payload = {}) {\n  const resp = await axios({\n    method: 'POST',\n    url: `/endpoint/local/prom/api/v1/query`,\n    data: {'query': `sum(rate(container_fs_io_current{id=~\"/docker/.*\"}[${payload.promInterval}])) by (name) > ${payload.diskIOThreshold}`\n    },\n    headers: {\n      'Authorization': `Basic ${b64EncodeUnicode(payload.promAccount)}`\n    }\n  })\n\n  if (resp.data.code === 200) {\n    return resp.data.data.result.map((item) => {\n      if (item.value[1]) {\n        item.value[1] = byteTransferConver(item.value[1], 2)\n      }\n      return item\n    })\n  }\n}\n\nexport async function getContainersWithHighCPUUsage (payload = {}) {\n  console.log(payload.promInterval, payload.cpuUsageThreshold, `sum(irate(container_cpu_usage_seconds_total{id=~\"/docker/.*\"}[${payload.promInterval}])) by (name) * 100 > ${payload.cpuUsageThreshold}`)\n  const resp = await axios({\n    method: 'POST',\n    url: `/endpoint/local/prom/api/v1/query`,\n    data: {'query': `sum(irate(container_cpu_usage_seconds_total{id=~\"/docker/.*\"}[${payload.promInterval}])) by (name) * 100 > ${payload.cpuUsageThreshold}`\n    },\n    headers: {\n      'Authorization': `Basic ${b64EncodeUnicode(payload.promAccount)}`\n    }\n  })\n\n  if (resp.data.code === 200) {\n    return resp.data.data.result.map((item) => {\n      item.value[1] = `${Number(item.value[1]).toFixed(2)}%`\n      return item\n    })\n  }\n}\n\nexport async function getContainersWithHighMemoryUsage (payload = {}) {\n  const resp = await axios({\n    method: 'POST',\n    url: `/endpoint/local/prom/api/v1/query`,\n    data: {'query': `avg_over_time(container_memory_usage_bytes{id=~\"/docker/.*\"}[${payload.promInterval}]) > ${payload.memoryUsageThreshold}`\n    },\n    headers: {\n      'Authorization': `Basic ${b64EncodeUnicode(payload.promAccount)}`\n    }\n  })\n\n  if (resp.data.code === 200) {\n    return resp.data.data.result.filter((item) => {\n      return item.metric && item.metric.name\n    }).map((item) => {\n      item.value[1] = `${byteConver(item.value[1], 2)}`\n      return item\n    })\n  }\n}\n"]}